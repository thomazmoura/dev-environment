set number
set relativenumber
set encoding=UTF-8
set linebreak

set tabstop=2
set shiftwidth=2
set expandtab

set ignorecase
set smartcase

set cursorline
set cursorcolumn

set foldmethod=syntax
set foldlevel=4

set hlsearch

" Set default directory for the swap files
set directory=$HOME/.vim/swapfiles/

set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175
set termguicolors

set wildignore+=*.png
set wildignore+=*.jpg
set wildignore+=*/node_modules/**
set wildignore+=*/bin/**
set wildignore+=*/obj/**

" Custom Registers
" Convert SQL Column to C# property
let @s = "^Wdi]^Pa wdi]hPlD:s/numeric/decimal/e:s/bit/bool/e:s/nvarchar/string/e:s/varchar/string/e:s/float/double/e:s/datetime2/datetime/e:s/bigint/float/e:s/text/string/e:s/datetime/DateTime/eA { get; set; }Ipublic j"
" Merge SQL mapping and C# properties
let @c = "^d2Wf{hDIbuilder.Property(pe€kb€kbusuario => usuario.A)o.HasColumnName();hi\"\"mz}j^yi]dd`z^f\"\"0pj"
let @z = "\"zyiwb\"x y\"xyiwOprivate readonly \"xpa \"zpbi_A;/{%O\"zpI_A = \"zpA;=="
set autowrite
set autowriteall

autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/.plugged')

" General Settings
Plug 'preservim/nerdcommenter'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'machakann/vim-highlightedyank'

" HTML editing
Plug 'mattn/emmet-vim', { 'for': 'html' }

if !exists('g:vscode')
  " General Settings
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'easymotion/vim-easymotion'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'preservim/nerdtree'
  Plug 'xuyuanp/nerdtree-git-plugin'
  Plug 'luochen1990/rainbow'
  Plug 'itchyny/lightline.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'roxma/vim-tmux-clipboard'
  Plug 'antoinemadec/coc-fzf'

  " Overhaul
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

  " Colorschemes
  Plug 'joshdick/onedark.vim'
  Plug 'rakr/vim-one'
else
  Plug 'asvetliakov/vim-easymotion', { 'dir': '~/.vim/.plugged/vim-easymotion-vscode' } 
endif

call plug#end()

" Custom Keymaps
"  Set space as the leader
let mapleader = " "

" Define which keybindings file to load
if exists('g:azuredatastudio')
  source $HOME/.shell/azuredatastudio-keybindings.vimrc
elseif exists('g:vscode')
  source $HOME/.shell/vscode-keybindings.vimrc
else
  " COC.NVIM default settings
  source $HOME/.vim/coc-config.vimrc

  " NeoVim keybindings
  source $HOME/.vim/nvim-keybindings.vimrc

  " Lightline settings
  source $HOME/.vim/lightline-config.vimrc
endif

" Clipboard intergration (WSL2)
if has('clipboard') || exists('g:vscode')
    if has('nvim') && exists('$WSLENV')
        let g:clipboard = {
            \ 'name': 'win32yank-wsl',
            \ 'copy': {
            \    '+': 'win32yank.exe -i --crlf',
            \    '*': 'win32yank.exe -i --crlf',
            \  },
            \ 'paste': {
            \    '+': 'win32yank.exe -o --lf',
            \    '*': 'win32yank.exe -o --lf',
            \ },
            \ 'cache_enabled': 0,
        \ }
    endif
endif

" Transparent windows (neovim-only)
if has('nvim')
  set winblend=30
endif

if !exists('g:vscode')
  let g:rainbow_conf = {
  \	'separately': {
  \		'*': {},
  \		'html': 0
  \	}
  \}

  " Rainbow brackets
  let g:rainbow_active = 1

  " NERDTree File highlighting 
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg 
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#' 
  endfunction

  let g:NERDTreeIgnore = ['^build$', '^bin', '^obj', '^node_modules']

  let NERDTreeMinimalUI = 1
  let NERDTreeDirArrows = 1

  " vim-markdown Settings
  let g:vim_markdown_folding_disabled = 1

  " Coc-Nvim Extensions
  let g:coc_global_extensions=[
  \  'coc-angular',
  \  'coc-css',
  \  'coc-emmet',
  \  'coc-html',
  \  'coc-json',
  \  'coc-prettier',
  \  'coc-eslint',
  \  'coc-tsserver',
  \  'coc-powershell',
  \  'coc-yaml',
  \  'coc-omnisharp',
  \  'coc-git',
  \]

  " Write all buffers before navigating from Vim to tmux pane
  let g:tmux_navigator_save_on_switch = 2

  " FZF configuration
  let g:fzf_layout = { 'window': { 'width': 0.85, 'height': 0.85 } }
  let g:airline_theme='one'

  " Colorscheme
  syntax enable
  let g:one_allow_italics = 1 
  colorscheme one
  set background=dark

  " OS Specific configuration
  source $HOME/.shell/vimrc
endif

" Client agnostic keybinngs
if executable('uuidgen')
  nnoremap <Leader>g  mz:r!uuidgen<CR>y$dd`z"0p
  nnoremap <Leader>G  mz:r!uuidgen<CR>y$dd`z"0P
else
  nnoremap <Leader>g  mz:r!pwsh -Command "[guid]::NewGuid().ToString()"<CR>y$dd`z"0p
  nnoremap <Leader>G  mz:r!pwsh -Command "[guid]::NewGuid().ToString()"<CR>y$dd`z"0P
endif
noremap <Leader>y "+y
noremap <Leader>p "+p
noremap <Leader>Y "+Y
noremap <Leader>P "+P
noremap <Leader>0p "0p
noremap <Leader>0P "0P
nnoremap <Leader>\  :vsplit<CR>
" Force quit terminal
tnoremap <Leader><ESC> <C-\><C-N>

" Macros
" Class boilerplate
nnoremap <leader>mn inamespace %F/ly$hD:s/\//./go{}Opublic class "0pF.Do{}OI		:noh<CR>
" Convert SQL Column to C# property (n - supported)
nnoremap <leader>ms @="^Wdi]^Pa\<lt>Space>\<lt>Esc>wdi]hPlD:s/numeric/decimal/e\<lt>CR>:s/bit/bool/e\<lt>CR>:s/nvarchar/string/e\<lt>CR>:s/varchar/string/e\<lt>CR>:s/float/double/e\<lt>CR>:s/datetime2/datetime/e\<lt>CR>:s/bigint/float/e\<lt>CR>:s/text/string/e\<lt>CR>:s/datetime/DateTime/e\<lt>CR>A\<lt>Space>{\<lt>Space>get;\<lt>Space>set;\<lt>Space>}\<lt>Esc>Ipublic\<lt>Space>\<lt>Esc>j"<CR>
" Merge SQL mapping and C# properties (n - supported)
nnoremap <leader>mc @="^d2Wf{hDIbuilder.Property(\<lt>Esc>\"0pa\<lt>Space>=>\<lt>Space>\<lt>Esc>\"0pa.\<lt>Esc>A)\<lt>Esc>o.HasColumnName();\<lt>Esc>hi\"\"\<lt>Esc>mz}j^\"zyi]dd`z^f\"\"0\"zpj"<CR>
" Add parameter injection
nnoremap <leader>mp @="\"zyiwb\"xyiw?(\<lt>CR>Oprivate\<lt>Space>readonly\<lt>Space>\<lt>Esc>\"xpa\<lt>Space>\<lt>Esc>\"zpbi_\<lt>Esc>A;\<lt>Esc>/{\<lt>CR>%O\<lt>Esc>\"zpI_\<lt>Esc>A\<lt>Space>=\<lt>Space>\<lt>Esc>\"zpA;\<lt>Esc>=="<CR>

" Disable modelines for security reasons
set nomodeline

