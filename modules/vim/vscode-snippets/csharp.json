{
	"Multiline Documentation Summary": {
		"prefix": "msum",
		"body": [
			"/// <summary>",
      "/// ${1:Descricao}",
			"/// </summary>"
		],
		"description": "Creates a new private const field"
	},
	"Inline Documentation Summary": {
		"prefix": "isum",
		"body": [
			"/// <summary> ${1:Descricao} </summary>"
		],
		"description": "Creates a new private const field"
	},
	"Private Constant Field": {
		"prefix": "constf",
		"body": [
			"private const ${1:Type} ${2:Name};"
		],
		"description": "Creates a new private const field"
	},
	"Private Readonly Field": {
		"prefix": "read",
		"body": [
			"private readonly ${1:Class} _${2:name};"
		],
		"description": "Creates a new private readonly field"
	},
	"Private Field": {
		"prefix": "field",
		"body": [
			"private ${1:Type} _${2:name};"
		],
		"description": "Creates a new private field"
	},
  "Cancellation Token": {
    "prefix": "ctk",
    "body": [
      "CancellationToken cancellationToken"
    ],
    "description": "Add a CancellationToken parameter"
  },
	"Unit Test": {
		"prefix": "ut",
		"body": [
			"[Fact]",
			"public async Task ${1:Método}_${2:SituaçãoSimulada}_${3:ResultadoEsperado}()",
			"{",
			"    $0",
			"}"
		],
		"description": "Cria um teste unitário utilizando o XUnit."
	},
	"Simple Class": {
		"prefix": "cls",
		"body": [
			"namespace $0${TM_DIRECTORY/[\\/\\\\]/./g}",
			"{",
			"    public class ${TM_FILENAME_BASE:Class}",
			"    {",
			"        ${1}",
			"    }",
			"}"
		],
		"description": "Cria uma configuração de entidade do EF Core"
	},
	"Entity Type Configuration (.NET 6)": {
		"prefix": "efconfig",
		"body": [
			"namespace ${2:Namespace}.Dados.Configuracao;",
			"",
			"public class ${1:Entidade}Configuracao : IEntityTypeConfiguration<${1:Entidade}>",
			"{",
			"    public void Configure(EntityTypeBuilder<${1:Entidade}> builder)",
			"    {",
			"        builder.ToTable(nameof(${1:Entidade}));",
			"    }",
			"}"
		],
		"description": "Cria uma configuração de entidade do EF Core (.NET 6)"
	},
	"Entity Type Configuration": {
		"prefix": "efconf-old",
		"body": [
			"using Microsoft.EntityFrameworkCore;",
			"using Microsoft.EntityFrameworkCore.Metadata.Builders;",
			"using ${2:Namespace}.Entidades;",
			" ",
			"namespace ${2:Namespace}.Dados.Configuracao",
			"{",
			"    public class ${1:Entidade}Configuracao : IEntityTypeConfiguration<${1:Entidade}>",
			"    {",
			"        public void Configure(EntityTypeBuilder<${1:Entidade}> builder)",
			"        {",
			"            builder.ToTable(\"${1:Entidade}\");",
			"        }",
			"    }",
			"}"
		],
		"description": "Cria uma configuração de entidade do EF Core"
	},
  "Empty Constructor": {
    "prefix": "econstructor",
    "body": [ 
      "public ${TM_FILENAME_BASE:Classe}() { }",
      "${1}"
    ]
  },
  "Constructor": {
    "prefix": "constructor",
    "body": [ 
      "public ${TM_FILENAME_BASE:Classe}()",
      "{",
      "    ${1}",
      "}",
      ""
    ]
  },
	"API Controller": {
		"prefix": "apictrlr",
		"body": [
			"namespace ${1:Namespace}.Controllers;",
			"",
      "[ApiController]",
			"[Route(\"${3:rota}\")]",
			"[RoleAuthorize(Roles.${4:Role})]",
			"public class ${2:Entidade}Controller : ControllerBase",
			"{",
			"    private readonly Contexto _contexto;",
			"    public ${2:Entidade}Controller(Contexto contexto)",
			"    {",
			"        _contexto = contexto;",
			"    }",
			"",
			"    [HttpGet]",
			"    public async Task<IActionResult> Get(CancellationToken cancellationToken)",
			"    {",
			"        ${0}",
			"    }",
			"}"
		]
	},
	"Public Property": {
		"prefix": "prop",
		"body": [
			"public ${1:Class} ${2:Name} { get; set; }"
		],
		"description": "Creates a new public property"
	},
	"Foreach Statement": {
		"prefix": "foreach",
		"body": [
			"foreach(var ${1:variable} in ${2:collection})",
			"{",
			"    ${3}",
			"}"
		],
		"description": "Creates a new foreach statement"
	},
	"Extensions Method Filter": {
		"prefix": "extension-filter",
		"body": [
			"public IQueryable<${1:Entidade}> Filtrar(this IQueryable<${1:Entidade}> ${2:entidade})",
			"{",
			"    return ${2:entidade}.Where(${3:entidades} => ${3:entidades}.${3:Condicao});",
			"}"
		],
		"description": "Cria uma configuração de entidade do EF Core"
	},
  "Extension Methods class": {
    "prefix": "extension-method-class",
    "body": [
      "public static class ${TM_FILENAME_BASE:Entity}Extensions",
      "{",
      "    public static IQueryable<${TM_FILENAME_BASE:Entity}> ${1:MethodName}(this IQueryable<${TM_FILENAME_BASE:Entity}> ${2:variables})",
      "    {",
      "        return ${2:variables}.${3:Method}(${4:variable} => ${5});",
      "    }",
      "}",
      ""
    ],
    "description": "Creates a class for extension methods for filtering entities"
  },
  "Extension Method": {
    "prefix": "extension-method",
    "body": [
      "public static IQueryable<${TM_FILENAME_BASE:Entity}> ${1:MethodName}(this IQueryable<${TM_FILENAME_BASE:Entity}> ${2:variables})",
      "{",
      "    return ${2:variables}.${3:Method}(${4:variable} => ${5});",
      "}"
    ],
    "description": "Creates an extension method for filtering entities"
  },
  "Generic Extension Methods class": {
    "prefix": "gemc",
    "body": [
      "public static class ${1:${TM_FILENAME_BASE:Entity}}Extensions",
      "{",
      "    public static IQueryable<${2:${TM_FILENAME_BASE:Entity}}> ${3:MethodName}(this IQueryable<${4:${TM_FILENAME_BASE:Entity}}> ${5:variables})",
      "    {",
      "        return ${5:variables}.${6:Method}(${7:variable} => ${8});",
      "    }",
      "}",
      ""
    ],
    "description": "Creates a class for extension methods for filtering entities"
  },
  "Generic Extension Method": {
    "prefix": "gem",
    "body": [
      "public static IQueryable<${1:${TM_FILENAME_BASE:Entity}}> ${2:MethodName}(this IQueryable<${3:${TM_FILENAME_BASE:Entity}}> ${4:variables})",
      "{",
      "    return ${4:variables}.${5:Method}(${6:variable} => ${7});",
      "}"
    ],
    "description": "Creates an extension method for filtering entities"
  },
  "Test Sample": {
    "prefix": "test-sample",
    "body": [
      "public ${1:Entity} AddNew${1:Entity}()",
      "{",
      "    var ${2:VariableName} = new ${1:Entity}()",
      "    {",
      "        ${4}",
      "    };",
      "    ${3:_context}.Add(${2:VariableName});",
      "    ${3:_context}.SaveChanges();",
      "    return ${1:Entity};",
      "}"
    ],
    "description": "Create an instance of an entity and add it to the _context"
  },
  "Exemplo de Teste": {
    "prefix": "test-sample-br",
    "body": [
      "public ${1:Entidade} Inserir${1:Entidade}()",
      "{",
      "    var ${2:nomeDaVariavel} = new ${1:Entidade}()",
      "    {",
      "        ${4}",
      "    };",
      "    ${3:Contexto}.Add(${2:nomeDaVariavel});",
      "    ${3:Contexto}.SaveChanges();",
      "    return ${2:nomeDaVariavel};",
      "}"
    ],
    "description": "Cria uma instância de uma entidade e a acrescenta ao _contexto;"
  }
}
