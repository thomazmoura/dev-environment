set -sg escape-time 0

# set tmux as screen-256color
set -g terminal-overrides ',xterm-256color:Tc'
set -g default-terminal "tmux-256color"
set -as terminal-overrides ',xterm*:sitm=\E[3m'

# undercurl support
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

# Undercurl
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# Pane status
set -g pane-border-status bottom
set -g pane-border-format "#{pane_title}-(#P)"

# Check if we are in WSL
if-shell 'test -n "$WSL_DISTRO_NAME"' {
  set -as terminal-overrides ',*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m' # underscore colours - needs tmux-3.0 (wsl2 in Windows Terminal)
}

# Fix focus events forvim
set -g focus-events on

# Enable mouse
set-option -g mouse on

# Put status bar on top
set-option -g status-position top

# set vi keys mode
set-window-option -g mode-keys vi

# smart pane switching with awareness of vim splits
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Change session interactively
bind C-p split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
bind / split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
# Create a new sesssion from ~/code interactively
bind C-n split-window -v 'location=$(fd --type d . --base-directory "$HOME/code" | fzf --reverse) && cd "$HOME/code/$location" && locationName=$(echo ${PWD##*/} | tr "." "_") && tmux new -s $locationName -d && tmux switch-client -t $locationName && tmux switch-client -T prefix'
# Open NeoVim on main pane and open new terminal windows
bind v 'split-window -v -l 20% ; send-keys "pwsh -NoExit -Command \"psgit && psfzf && Build-DotnetProjectIfNeeded\" && exit" C-m; select-pane -t 0 ; send-keys "pwsh -NoExit -Command \"$HOME/.modules/neovim-lsp/Install-LanguageServerNodePackages.ps1 && nvim\" && exit" C-m'
bind V 'split-window -h -l 20% ; split-window -v -l 50%; send-keys "pwsh -NoExit -Command \"psgit && psgit && psfzf && Build-DotnetProjectIfNeeded\" && exit" C-m; select-pane -t 0 ; send-keys "pwsh -NoExit -Command \"$HOME/.modules/neovim-lsp/Install-LanguageServerNodePackages.ps1 && nvim\" && exit" C-m'
# Binding to start an Angular + .NET app
bind a 'split-window -h; send-keys "pwsh -Command \"cd \\\"*Angular\\\" && nvs use auto && Install-NpmIfNeeded && npm run frontend\"; exit" C-m ; select-pane -t 1'
# Multi-key bindings using custom key table for AI tools
bind t switch-client -T custom-t-menu
bind -T custom-t-menu c 'split-window -h; select-pane -T "Claude Code"; send-keys "claude && exit" C-m'
bind -T custom-t-menu C 'split-window -h; select-pane -T "Claude Code"; send-keys "claude --continue && exit" C-m'
bind -T custom-t-menu x 'split-window -h; select-pane -T "Codex"; send-keys "codex && exit" C-m'
bind -T custom-t-menu X 'split-window -h; select-pane -T "Codex"; send-keys "codex resume --last && exit" C-m'
bind -T custom-t-menu p 'split-window -h; select-pane -T "Copilot"; send-keys "nvs use latest && copilot && exit" C-m'
bind -T custom-t-menu P 'split-window -h; select-pane -T "Copilot"; send-keys "nvs use latest && copilot --continue && exit" C-m'
bind A 'split-window -h; send-keys "pwsh -NoExit -Command \"cd \\\"*Angular\\\" && nvs use auto && Install-NpmIfNeeded && npms\" && exit" C-m ; split-window -h ; send-keys "pwsh -NoExit -Command \"cd \\\"*ApiInterface\\\" && dwr\" && exit" C-m ; select-pane -t 1'
bind Z 'resize-pane -Z; copy-mode'
unbind %
unbind '"'
bind % 'split-window -h "pwsh && exit"'
bind '"' 'split-window -v "pwsh && exit"'

set -s command-alias[100] 'kw=kill-window'

# transfer copied text to attached terminal with yank
bind-key -T copy-mode-vi Y send-keys -X copy-pipe 'clip.exe > #{pane_tty}'
# transfer most-recently copied text to attached terminal with yank
bind-key -n M-y run-shell 'tmux save-buffer - | clip.exe > #{pane_tty}'
# transfer previously copied text (chosen from a menu) to attached terminal
bind-key -n M-Y choose-buffer 'run-shell "tmux save-buffer -b \"%%%\" - | clip.exe > #{pane_tty}"'

#-------------------------------------------------------#
#Pane colours
#-------------------------------------------------------#
# set inactive/active window styles
set -g window-style 'fg=colour245,bg=#52545e'
set -g window-active-style 'fg=colour15,bg=terminal'
#-------------------------------------------------------#

# tmux plugins settings
set -g @tmux_power_theme 'sky'
set -g @tmux_power_time_format '%H:%M'
set -g @tmux_power_date_format '%d/%m/%Y'

# tmux plugins (using TPM)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'wfxr/tmux-power'

# Initialize TPM
run '~/.tmux/plugins/tpm/tpm'

